// discardIters: number of iterations to discard at the beginning
// renderIters: number of iterations to render afterwards
// detail: number of datapoints to compute
// initCond: initial condition of the system
// x1, x2, y1, y2: viewing bounds of the graph
// iterate: change this function to change the map
// (several presets have been left for various different maps)
// press any key to export the image

// visit https://processing.org/reference and
// https://docs.oracle.com/javase/tutorial/
// for further details

int discardIters = 10000, renderIters = 1000, detail = 2000;
double initCond = 0.5, x1 = 0, x2 = 4, y1 = 0, y2 = 1;

float axisOffset;
int globalLineThickness = 2;
double[] data = new double[detail];

void setup() {
  size(1000, 1000);
  axisOffset = width * 0.1;
  strokeWeight(globalLineThickness);
  textAlign(CENTER, CENTER);
  textSize(axisOffset / 2);
  fill(0);
  
  background(255);
  
  line(axisOffset, height - axisOffset, width - axisOffset, height - axisOffset);
  line(axisOffset, axisOffset, axisOffset, height - axisOffset);
  line(width / 2, height - axisOffset, width / 2, height - axisOffset * 3 / 2);
  line(width - axisOffset, height - axisOffset, width - axisOffset, height - axisOffset * 3 / 2);
  line(axisOffset, height / 2, axisOffset * 3 / 2, height / 2);
  line(axisOffset, axisOffset, axisOffset * 3 / 2, axisOffset);
  
  axisFormat(x1, axisOffset, height - axisOffset / 2 - axisOffset / 16);
  axisFormat((x1 + x2) / 2, width / 2, height - axisOffset / 2 - axisOffset / 16);
  axisFormat(x2, width - axisOffset, height - axisOffset / 2 - axisOffset / 16);
  
  axisFormat(y1, axisOffset / 2, height - axisOffset - axisOffset / 16);
  axisFormat((y1 + y2) / 2, axisOffset / 2, height / 2 - axisOffset / 16);
  axisFormat(y2, axisOffset / 2, axisOffset - axisOffset / 16);
  
  stroke(0, 10);
  strokeWeight(1);
  
  for (int i = 0; i < data.length; i++) {
    data[i] = initCond;
    for (int iters = 0; iters < discardIters; iters++)
      data[i] = iterate(i, data[i]);
    for (int iters = 0; iters < renderIters; iters++) {
      data[i] = iterate(i, data[i]);
      if (data[i] >= y1 && data[i] <= y2)
        render(i);
    }
  }
}

void axisFormat(double val, float x, float y) {
  if ((int)val == val)
    text((int)val, x, y);
  else
    text(str((float)val), x, y);
}

double iterate(int i, double x) {
  double mu = x1 + (x2 - x1) * i / data.length;
  return mu * x * (1 - x);
  //return 2 * mu * (x < 0.5 ? x : 1 - x);
  //return (x + mu) % 1;
  //return x + mu * x * (1 - x);
}

void render(int i) {
  point((float)((double)i / data.length * (width - 2 * axisOffset) + axisOffset),
        (float)((y2 - data[i]) / (y2 - y1) * (height - 2 * axisOffset) + axisOffset)
       );
}

void mousePressed() {
  println(map(mouseX, axisOffset, width - axisOffset, (float)x1, (float)x2));
}

void keyPressed() {
  save("img.png");
}

void draw() {
}
